// base.js
var db    = require("db")
var oauth = require("oauth")
var async = require("async")
var error = require("./error.js")
var util  = require("./util.js")


function base(req, res){ tpl_val = {
		selected: {about: "selected"},
		title: "Tomorrow title, today.",
		content: "Twinoid offer a lot of option for your title. Complete title or from part, from one game or many. With or without icons. Some part require a lot of work to be usable. You might not be aware of other from some game you overlooked. //Choose Your Title// aim to ake it easy to design **your** title. Choose from all discovered part, then track your progress toward your goal."
	}
	res.render("index", tpl_val)
}

function test(req, res){
	res.render("index", {title: "test"})
}


function process(session, json){
	payload = { title: json.title, name: json.name, locale: json.locale }
	db.r.hmset("user:"+json.id+":data", payload)

	async.each(json.sites, function(s, end){
		// some site don't have interesting data
		if(typeof(s.achievements) == 'undefined') return end()

		payload = { icon: s.site.icon.url, lang: s.site.lang, name: s.site.name }
		// ////
		// info
		s.site.infos.forEach(function(info){
			payload[info.lang] = JSON.stringify({
				cover: (info.cover)?info.cover.url:null, 
				description: info.description, tagline: info.tagLine })
		})
		db.r.hmset("site:"+s.site.id+":data", payload)
		// ////
		// stat
		async.concat(s.stats, function(stat, next){
			// send pair key/value
			next(null, [s.site.id+"_"+stat.id, stat.score])
		}, function(err, result){
			// don't do anything if no data
			if(result.length == 0) return
			result.unshift("user:"+session.uid+":stat")
			db.r.hmset(result, function(){})
		})
		// ////
		// achiev
		async.each(s.achievements, function(achiv, end){
			db.achievements.process(s.site.id, achiv)
		})
		// this site is processed
		end()
	}, function(err, result){

	})
}

var login = {
	signin: function(req, res, next){
		req.session.from = req.headers['referer'] 
		// tout va bien
		if(req.session.me)
			return res.redirect(req.session.from)
		// non-authentifier
		if(!req.session.token)
			return res.redirect("/auth")
		// la session a expir√©
		if(new Date(req.session.access.expire) <= new Date(Date.now()))
			return res.redirect("/refresh")
		// we should have a valid token at this point
		console.log("grabbing data")
		util.oauth.get("https://twinoid.com/graph/me?fields="
					+"id,name,locale,title,sites.fields("
						+"site.fields(id,name,icon,lang,"
							+"infos.fields(tid,lang,cover,tagLine,description)"
						+"),"
						+"stats.fields(id,score,name,icon,description,rare,social),"
						+"achievements.fields("
							+"id,name,stat,score,points,npoints,"
							+"description,data,date"
						+")"
					+")",
			 	req.session.token,
			 	function(err, result, response){
					json = JSON.parse(result)
					req.session.me = { uid: json.id, locale: json.locale,
						title: json.title, name: json.name }
					async.nextTick(function(){process(req.session, json)})
					res.render("api.html", {title:"api", content:json})
				}
		)
	},
	go: function go(req, res, next){
		url = util.oauth.getAuthorizeUrl({
			response_type:"code", state:"foobar", access_type: "offline",
			redirect_uri: "http://localhost:3000/back"})
		// send the user fetch the authorisation
		res.redirect(url)
	},
	back: function back(req, res, next){
		util.oauth.getOAuthAccessToken(req.query.code, {
				grant_type:'authorization_code',
				redirect_uri:'http://localhost:3000/back'
			}, login.parse.bind({req:req, res:res}))
	},
	refresh: function refresh(req, res, next){
		util.oauth.getOAuthAccessToken(req.session.refresh, {
				grant_type:'refresh_token' 
			}, login.parse.bind({req:req, res:res}))
	},
	parse: function parse(err, access_token, refresh_token, result){
			// error management
			if(err) return next(new Error(err))
			if(result.error) return next(new error.OAuth(result.error))
			// success
			this.req.session.access = result
			this.req.session.token  = access_token
			this.req.session.refresh= refresh_token
			this.req.session.access.expire=new Date(Date.now()+result.expires_in*1000)
			this.res.redirect("/login")
	}
}

this.setup = function setup(app){
	app.get('/',        base)
	app.get('/test',    test)
	app.get('/login',   util.need.session, login.signin)
	app.get('/auth',    login.go)
	app.get('/back',    login.back)
	app.get('/refresh', login.refresh)
	app.get('/session', function(req, res){
		req.session.bip = "bip"
		tpl_val = {list: req.session}
		res.render("list", tpl_val)
	})
}
